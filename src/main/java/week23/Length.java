package week23;

public class Length {
    public static void main(String[] args) {
        String len = "“Matching-Fit” 프로젝트 수행 중 기존 JWT 기반 인증 시스템의 보안과 성능 문제의 본질을 찾아 이를 개선한 경험이 있습니다.\n" +
                "기존 시스템에서는 클라이언트 쿠키에 저장된 Access Token으로 인증을 처리하고, Refresh Token을 DB에서 조회 후 일정 시간이 지나면 재발급하도록 구현이 되어 있었습니다. 이 방식으로 인해 여러 문제점이 발생했습니다.\n" +
                "테스트 과정에서 프론트엔드 요청과 서버 로그를 확인했을 때 로그아웃 요청을 보내도 여전히 클라이언트에 저장된 Access Token이 만료되기 전까지 유효하여 사용자 서비스에 접근이 가능하다는 문제를 발견했습니다. 그래서 의문이 생겨서 찾아보니 로그아웃 시에 DB에 의존해서 Refresh Token만 삭제하고, Access Token은 단순히 만료 시간을 기다리는 구조라는 것을 확인하게 되었습니다.\n" +
                "그리고 성능 저하 원인을 파악하던 중 로그인이나 토큰 재발급 요청 시, 요청이 처리되는 시간이 길고 DB 조회와 I/O가 반복적으로 발생했습니다. 이 원인으로 불필요한 성능 저하를 초래한다는 것을 확인할 수 있었습니다.\n" +
                "이를 개선하기 위해 Redis 기반 토큰 관리 시스템을 도입했습니다. 로그인 시 Access Token과 Refresh Token을 Redis에 저장하고, 클라이언트에는 Access Token만 쿠키 형태로 발급했습니다. 이후 인증 과정에서는 Redis와 대조하여 토큰 유효성을 즉시 확인하고, Redis에 존재하지 않으면 무효 처리되도록 변경했습니다. 또한 로그아웃 시에는 해당 토큰을 Redis에서 삭제하거나 TTL 기능을 활용하여 만료 시간이 지나면 자동으로 무효화되도록 설계했습니다.\n" +
                "이번 경험을 통해 단순히 문제를 해결하는 것이 아니라 Why를 생각하며 기능의 본질적인 문제점을 파악하고 근본적인 해결책을 찾아 해결하는 것이 서비스의 완성도를 더욱 향상시킬 수 있다는 것을 알게 되었습니다.\n";
        System.out.println(len.length());

    }
}
